{"version":3,"sources":["cljs_time/internal/core.cljs"],"mappings":"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","names":["cljs-time.internal.core/months","cljs-time.internal.core/days","cljs-time.internal.core/abbreviate","n","s","cljs.core.subs","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","cljs-time.internal.core/=","seq35642","self__4777__auto__","cljs.core/seq","args","p1__35640#","cljs.core/every?","js/goog.date.Date","cljs.core.apply","cljs.core/=","p1__35641#","cljs.core.map","cljs-time.internal.core/leap-year?","y","cljs.core/mod","cljs-time.internal.core/days-in-month","cljs-time.internal.core/corrected-dim","month","G__35643","cljs_time.internal.core._EQ_","cljs-time.internal.core/year-corrected-dim","year","G__35644","p__35645","map__35646","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","cljs-time.internal.core/valid-date?","years","months","days","hours","minutes","seconds","millis","weekyear","weekyear-week","day-of-week","d","months?","dim","and__4174__auto__","days?","hours?","minutes?","seconds?","millis?","weekyear-week?","day-of-week?","cljs.core.remove","cljs.core/nil?","cljs.core/true?","cljs.core/not","or__4185__auto__","cljs.core.ex_info","G__35648","cljs.core.assoc","cljs-time.internal.core/index-of","coll","x","cljs.core/first","p1__35650#","p2__35649#","cljs.core.keep_indexed","cljs-time.internal.core/format","seq35651","G__35652","cljs.core/next","self__4776__auto__","fmt","cljs.core/Keyword","cljs.core/Symbol","goog.string/format","G__35654","cljs-time.internal.core/zero-pad","js/Error","zeros","clojure.string.join","cljs.core.take","cljs.core.repeat","cljs-time.internal.core/multiplied-by","period","scalar","field","cljs.core.update_in","scale-fn","cljs-time.internal.core/get-week-year","date","january","december","week-number","goog.date/getWeekNumber"],"sourcesContent":["(ns cljs-time.internal.core\n  (:refer-clojure :exclude [=])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]\n   [goog.string.format]\n   [goog.date]))\n\n(def months\n  [\"January\" \"February\" \"March\" \"April\" \"May\" \"June\" \"July\" \"August\"\n   \"September\" \"October\" \"November\" \"December\"])\n\n(def days\n  [\"Sunday\" \"Monday\" \"Tuesday\" \"Wednesday\" \"Thursday\" \"Friday\" \"Saturday\"])\n\n(defn abbreviate [n s]\n  (subs s 0 n))\n\n(defn = [& args]\n  (cond (every? #(instance? goog.date.Date %) args)\n        (apply cljs.core/= (map #(.getTime %) args))\n        :default (apply cljs.core/= args)))\n\n(defn leap-year? [y]\n  (cond (zero? (mod y 400)) true\n        (zero? (mod y 100)) false\n        (zero? (mod y 4)) true\n        :else false))\n\n(def days-in-month [31 28 31 30 31 30 31 31 30 31 30 31])\n\n(defn corrected-dim [month]\n  (days-in-month (if (= month 1) 11 (dec month))))\n\n(defn year-corrected-dim [year month]\n  (cond-> (corrected-dim month)\n    (and (leap-year? year) (= month 2)) inc))\n\n(defn valid-date?\n  [{:keys [years months days hours minutes seconds millis\n           weekyear weekyear-week day-of-week] :as d}]\n  (let [months?  (when months (<= 1 months 12))\n        dim      (if years\n                   (and months months? (year-corrected-dim years months))\n                   (and months months? (corrected-dim months)))\n        days?    (when days (if dim (<= 1 days dim) (<= 1 days 31)))\n        hours?   (when hours (<= 0 hours 23))\n        minutes? (when minutes (<= 0 minutes 59))\n        seconds? (when seconds (<= 0 seconds 60))\n        millis?  (when millis (<= 0 millis 999))\n        weekyear-week? (when weekyear-week (<= 1 weekyear-week 53))\n        day-of-week? (when day-of-week (<= 1 day-of-week 7))]\n    (if (->> [months? days? hours? minutes? seconds? millis? \n              weekyear-week? day-of-week?]\n             (remove nil?)\n             (every? true?))\n      (if (not (and (or years months days)\n                    (or weekyear weekyear-week day-of-week)))\n        d\n        (throw \n         (ex-info \"Mixing year, month, day and week-year week-number fields\"\n                  {:type :invalid-date :date d\n                   :errors {}})))\n      (throw\n       (ex-info \"Date is not valid\"\n                {:type :invalid-date :date d\n                 :errors (cond-> {}\n                           (false? months?)  (assoc :months months)\n                           (false? days?)    (assoc :days days)\n                           (false? hours?)   (assoc :hours hours)\n                           (false? minutes?) (assoc :minutes minutes)\n                           (false? seconds?) (assoc :seconds seconds)\n                           (false? millis?)  (assoc :millis millis)\n                           (false? weekyear-week?) (assoc :weekyear-week weekyear-week)\n                           (false? day-of-week?) (assoc :day-of-week day-of-week))})))))\n\n(defn index-of [coll x]\n  (first (keep-indexed #(when (= %2 x) %1) coll)))\n\n(defn format\n  \"Formats a string using goog.string.format.\"\n  [fmt & args]\n  (let [args (map (fn [x]\n                    (if (or (keyword? x) (symbol? x))\n                      (str x)\n                      x))\n                  args)]\n    (apply gstring/format fmt args)))\n\n(defn zero-pad\n  \"Remove the need to pull in gstring/format code in advanced compilation\"\n  ([n] (if (<= 0 n 9) (str \"0\" n) (str n)))\n  ([n zeros]\n   ; No need to handle negative numbers\n   (if (< zeros 1)\n     (str n)\n     (str (string/join (take (- zeros (count (str n))) (repeat \"0\")))\n          n))))\n\n(defn multiplied-by [period scalar]\n  (letfn [(scale-fn [field]\n            (when field\n              (* field scalar)))]\n    (-> period\n        (update-in [:millis] scale-fn)\n        (update-in [:seconds] scale-fn)\n        (update-in [:minutes] scale-fn)\n        (update-in [:hours] scale-fn)\n        (update-in [:days] scale-fn)\n        (update-in [:weeks] scale-fn)\n        (update-in [:months] scale-fn)\n        (update-in [:years] scale-fn))))\n\n(defn get-week-year\n  \"Counterpart ot goog.date/getWeekNumber. \n  month 0 is jan per goog.date\"\n  [year month date]\n  (let [january (= month 0)\n        december (= month 11)\n        week-number (goog.date/getWeekNumber year month date)]\n    (cond \n      (and january (>= week-number 52)) (dec year)\n      (and december (= week-number 1))  (inc year)\n      :else year)))\n"]}