shadow$provide.module$node_modules$roughjs$bin$geometry=function(global,require,module,exports){function _toConsumableArray(arr){if(Array.isArray(arr)){var JSCompiler_temp=0;for(var arr2=Array(arr.length);JSCompiler_temp<arr.length;JSCompiler_temp++)arr2[JSCompiler_temp]=arr[JSCompiler_temp];JSCompiler_temp=arr2}else JSCompiler_temp=void 0;JSCompiler_temp||(JSCompiler_temp=Symbol.iterator in Object(arr)||"[object Arguments]"===Object.prototype.toString.call(arr)?Array.from(arr):void 0);if(!(arr=JSCompiler_temp))throw new TypeError("Invalid attempt to spread non-iterable instance");
return arr}function _slicedToArray(arr,i){var JSCompiler_temp=Array.isArray(arr)?arr:void 0;if(!JSCompiler_temp)if(Symbol.iterator in Object(arr)||"[object Arguments]"===Object.prototype.toString.call(arr)){JSCompiler_temp=[];var _n=!0,_d=!1,_e=void 0;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done)&&(JSCompiler_temp.push(_s.value),!i||JSCompiler_temp.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i["return"])_i["return"]()}finally{if(_d)throw _e;}}}else JSCompiler_temp=
void 0;if(!(arr=JSCompiler_temp))throw new TypeError("Invalid attempt to destructure non-iterable instance");return arr}function rotatePoints(points,center,degrees){if(points&&points.length){center=_slicedToArray(center,2);var cx=center[0],cy=center[1];degrees*=Math.PI/180;var cos=Math.cos(degrees),sin=Math.sin(degrees);points.forEach(function(p){var _p=_slicedToArray(p,2),x=_p[0];_p=_p[1];p[0]=(x-cx)*cos-(_p-cy)*sin+cx;p[1]=(x-cx)*sin+(_p-cy)*cos+cy})}}Object.defineProperty(exports,"__esModule",
{value:!0});exports.rotatePoints=rotatePoints;exports.rotateLines=function(lines,center,degrees){var points=[];lines.forEach(function(line){return points.push.apply(points,_toConsumableArray(line))});rotatePoints(points,center,degrees)};exports.lineLength=function(line){var p1=line[0];line=line[1];return Math.sqrt(Math.pow(p1[0]-line[0],2)+Math.pow(p1[1]-line[1],2))}}
//# sourceMappingURL=module$node_modules$roughjs$bin$geometry.js.map
