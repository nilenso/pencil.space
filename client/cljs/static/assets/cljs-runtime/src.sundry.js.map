{"version":3,"sources":["src/sundry.cljs"],"mappings":";;;;;;;AAOA,AAAeA,AAAuB,AAAA,AAACC;AACvC,AAAKC,AAAI,AAACC,AAAKC,AAAWC;AAC1B,AAAKC,AAAKC;AACV,AAAKC,AAAK,AAACL,AAAKM,AAAMC;AACtB,AAAKC,AAAM,AAAKC;AAAL,AAAW,AAAA,AAAA,AAACC,AAAQD;;AAC/B,AAAKE,AAAM,AAAKF;AAAL,AAAW,AAACG,AAAQH;;AAC/B,AAAKI,AAAQ,AAAKJ;AAAL,AAAW,AAAA,AAAIA;;AAE5B,AAAA;;;AAAA,AAAAK,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFE,AAAOC;AAFX,AAGG,AAAIA;AACF,AAACC,AAAWvB,AAAuB,AAACwB,AAAaH;;AACjD,AAACG,AAAaH;;;;AALnB,AAAA,AAAA,AAAMF,AAOFE;AAPJ,AAQG,AAAA,AAAIA,AACAI,AACAC;;;AAVP,AAAA,AAAA,AAAMP;;AAAN,AAYA,AAAA;;;AAAA,AAAAF,AAAMW;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMQ,AAEFC;AAFJ,AAGG,AAAA,AAAA,AAACC,AAAKD;;;AAHT,AAAA,AAAA,AAAMD,AAIFC,AAAEE;AAJN,AAKG,AAAA,AAACD,AAAKD,AAAEE;;;AALX,AAAA,AAAA,AAAMH,AAMFC,AAAEE,AAAOC;AANb,AAOG,AAACC,AAASJ,AAAEE,AAAOC;;;AAPtB,AAAA,AAAA,AAAMJ;;AAAN,AASA;;;AAAA,AAAMM;AAAN,AAGE,AAAA,AAAa,AAASC,AACT,AAAG,AAAA,AAAA,AACH,AAAA,AACA,AAAA","names":["src.sundry/default-time-formatter","cljs_time.format.formatter","src.sundry/now","cljs.core.comp","cljs-time.coerce/to-long","cljs-time.core/now","src.sundry/>evt","re-frame.core/dispatch","src.sundry/<sub","cljs.core/deref","re-frame.core/subscribe","src.sundry/->clj","data","cljs.core.js__GT_clj","src.sundry/->js","cljs.core/clj->js","src.sundry/->input","var_args","G__33862","src.sundry/epoch->local","js/Error","millis","format?","cljs-time.format/unparse","src.sundry.epoch__GT_local","cljs-time.coerce/from-long","cljs-time.coerce/to-local-date-time","G__33864","src.sundry/href","k","src.sundry.href","params","query","reitit.frontend.easy.href","src.sundry/random-hex-color","js/Math"],"sourcesContent":["(ns src.sundry\n  (:require [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [cljs-time.format :as tf]\n            [re-frame.core :as re-frame]\n            [reitit.frontend.easy :as rfe]))\n\n(def ^:private default-time-formatter (tf/formatter \"HH:ss (dd-mm-yy)\"))\n(def now (comp tc/to-long t/now))\n(def >evt re-frame/dispatch)\n(def <sub (comp deref re-frame/subscribe))\n(def ->clj (fn [data] (js->clj data :keywordize-keys true)))\n(def ->js  (fn [data] (clj->js data)))\n(def ->input (fn [data] (-> data .-target .-value) ))\n\n(defn epoch->local\n  \"Return time in browser timezone for given unix time, optionally formatted\"\n  ([millis format?]\n   (if format?\n     (tf/unparse default-time-formatter (epoch->local millis))\n     (epoch->local millis)))\n\n  ([millis]\n   (-> millis\n       tc/from-long\n       tc/to-local-date-time)))\n\n(defn href\n  \"Return relative url for given route. Url can be used in HTML links.\"\n  ([k]\n   (href k nil nil))\n  ([k params]\n   (href k params nil))\n  ([k params query]\n   (rfe/href k params query)))\n\n(defn random-hex-color\n  \"Return a random hex color code in #RRGGBB format\"\n  []\n  (str \"#\" (-> (.random js/Math)\n               (* (bit-shift-left 1 24))\n               (bit-or 0)\n               (.toString 16))))\n"]}