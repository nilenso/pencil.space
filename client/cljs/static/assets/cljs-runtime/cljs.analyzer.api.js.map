{"version":3,"sources":["cljs/analyzer/api.cljc"],"mappings":"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","names":["cljs.analyzer.api/empty-state","cljs.env.default_compiler_env","cljs.analyzer.api/empty-env","cljs.analyzer/empty-env","cljs.analyzer.api/warning-enabled?","warning-type","cljs.analyzer/*cljs-warnings*","cljs.analyzer.api/default-warning-handler","env","extra","cljs.analyzer/default-warning-handler","var_args","G__10209","cljs.analyzer.api/get-options","js/Error","cljs.analyzer.api.get_options","cljs.env/*compiler*","state","cljs.core/deref","cljs.core.get","G__10211","cljs.analyzer.api/get-js-index","cljs.analyzer.api/resolve","sym","cljs.core/map?","cljs.core/Symbol","e10212","*private-var-access-nowarn*-orig-val__10213","*private-var-access-nowarn*-temp-val__10214","cljs.analyzer/*private-var-access-nowarn*","cljs.analyzer.resolve_var","cljs.analyzer/confirm-var-exists-throw","e","cljs.analyzer/resolve-macro-var","G__10216","cljs.analyzer.api/all-ns","cljs.analyzer.api.all_ns","cljs.core/keys","G__10218","cljs.analyzer.api/find-ns","cljs.analyzer.api.find_ns","cljs.core.get_in","G__10220","cljs.analyzer.api/ns-interns","ns","cljs.analyzer.api.ns_interns","cljs.core.merge","G__10222","cljs.analyzer.api/ns-publics","cljs.analyzer.api.ns_publics","cljs.core.remove","p__10223","vec__10224","cljs.core.nth","k","v","cljs.core.into","G__10228","cljs.analyzer.api/ns-resolve","cljs.analyzer.api.ns_resolve","G__10231","cljs.analyzer.api/remove-ns","cljs.analyzer.api.remove_ns","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/dissoc"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.api\n  \"This is intended to be a stable api for those who need programmatic access\n  to the analyzer.\"\n  (:refer-clojure :exclude [all-ns ns-interns ns-resolve resolve find-ns\n                            ns-publics remove-ns])\n  (:require [cljs.env :as env]\n            [cljs.analyzer :as ana]))\n\n;; =============================================================================\n;; Useful Utilities\n\n(defn empty-state\n  \"Creates an empty compilation state Atom<Map>.\"\n  []\n  (env/default-compiler-env))\n\n(defmacro with-state\n  \"Run the body with the given compilation state Atom<Map>.\"\n  [state body]\n  `(env/with-compiler-env ~state\n     ~@body))\n\n(defn empty-env\n  \"Creates an empty analysis environment.\"\n  []\n  (ana/empty-env))\n\n(defmacro no-warn\n  \"Disable analyzer warnings for any analysis executed in body.\"\n  [& body]\n  (let [no-warnings (zipmap (keys ana/*cljs-warnings*) (repeat false))]\n    `(binding [ana/*cljs-warnings* ~no-warnings]\n       ~@body)))\n\n(defn warning-enabled?\n  \"Test if the given warning-type is enabled.\"\n  [warning-type]\n  (ana/*cljs-warnings* warning-type))\n\n(defn default-warning-handler\n  \"The default warning handler.\n\n   Outputs the warning messages to *err*.\"\n  [warning-type env extra]\n  (ana/default-warning-handler warning-type env extra))\n\n(defn get-options\n  \"Return the compiler options from compiler state.\"\n  ([] (get-options env/*compiler*))\n  ([state]\n   (get @state :options)))\n\n(defn get-js-index\n  \"Return the currently computed Google Closure js dependency index from the\n  compiler state.\"\n  ([] (get-options env/*compiler*))\n  ([state]\n   (get @state :js-dependency-index)))\n\n#?(:clj\n   (defn analyze\n     \"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children entry. This must be a vector of keywords naming\n     the immediately nested fields mapped to an expr or vector of exprs. This will\n     facilitate code walking without knowing the details of the op set.\"\n     ([env form] (analyze env form nil))\n     ([env form name] (analyze env form name nil))\n     ([env form name opts]\n      (analyze\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        env form name opts))\n     ([state env form name opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze env form name opts))))))\n\n#?(:clj\n   (defn forms-seq\n     \"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.\"\n     ([rdr] (ana/forms-seq* rdr nil))\n     ([rdr filename] (ana/forms-seq* rdr filename))))\n\n#?(:clj\n   (defn parse-ns\n     \"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n   \n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.\"\n     ([src] (parse-ns src nil nil))\n     ([src opts] (parse-ns src nil opts))\n     ([src dest opts]\n      (parse-ns\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        src dest opts))\n     ([state src dest opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/parse-ns src dest opts))))))\n#?(:clj\n   (defn analyze-file\n     \"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n   \n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \\\":output-dir/some/ns/foo.cljs.cache.edn\\\". This function does not return a\n      meaningful value.\"\n     ([f] (analyze-file f nil))\n     ([f opts]\n      (analyze-file\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        f opts))\n     ([state f opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze-file f opts))))))\n\n;; =============================================================================\n;; Main API\n\n(defn resolve\n  \"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve\"\n  [env sym]\n  {:pre [(map? env) (symbol? sym)]}\n  (try\n    (binding [ana/*private-var-access-nowarn* true]\n      (ana/resolve-var env sym\n        (ana/confirm-var-exists-throw)))\n    (catch #?(:clj Exception :cljs :default) e\n      (ana/resolve-macro-var env sym))))\n\n(defn all-ns\n  \"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.\"\n  ([]\n   (all-ns env/*compiler*))\n  ([state]\n   (keys (get @state ::ana/namespaces))))\n\n(defn find-ns\n  \"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.\"\n  ([sym]\n   (find-ns env/*compiler* sym))\n  ([state sym]\n   {:pre [(symbol? sym)]}\n   (get-in @state [::ana/namespaces sym])))\n\n(defn ns-interns\n  \"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-interns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (merge\n     (get-in @state [::ana/namespaces ns :macros])\n     (get-in @state [::ana/namespaces ns :defs]))))\n\n(defn ns-publics\n  \"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-publics env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (->> (merge\n          (get-in @state [::ana/namespaces ns :macros])\n          (get-in @state [::ana/namespaces ns :defs]))\n        (remove (fn [[k v]] (:private v)))\n        (into {}))))\n\n(defn ns-resolve\n  \"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\"\n  ([ns sym]\n   (ns-resolve env/*compiler* ns sym))\n  ([state ns sym]\n   {:pre [(symbol? ns) (symbol? sym)]}\n   (get-in @state [::ana/namespaces ns :defs sym])))\n\n(defn remove-ns\n  \"Removes the namespace named by the symbol.\"\n  ([ns]\n   (remove-ns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (swap! state update-in [::ana/namespaces] dissoc ns)))\n\n(defmacro in-cljs-user\n  \"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.\"\n  [env & body]\n  `(binding [cljs.analyzer/*cljs-ns* 'cljs.user]\n     (cljs.env/with-compiler-env ~env\n       ~@body)))\n"]}