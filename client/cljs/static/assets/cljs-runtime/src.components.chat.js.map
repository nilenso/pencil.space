{"version":3,"sources":["src/components/chat.cljs"],"mappings":"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","names":["js/src","js/src.components","js/src.components.chat","js/src.components.chat.tube-event-type","src.components.chat/tube-event-type","p__38306","map__38307","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","src.components.chat/create-msg","nick-name","avatar","msg","src.sundry/now","re_frame.core.reg_event_fx","p__38309","p__38310","map__38311","vec__38312","cljs.core.nth","db","_","G__38316","G__38317","re-frame.core/reg-fx","src.tube.push","src.sundry/->js","re_frame.core.reg_event_db","p__38318","vec__38319","cljs.core.update","cljs.core/conj","G__38322","G__38323","re-frame.core/reg-sub","src.components.chat/receive-msg","resp","G__38324","src.sundry/>evt","src.sundry/->clj","src.components.chat/chat-box","value","reagent.core.atom","p1__38325#","cljs.core/deref","e","G__38326","cljs.core/reset!","src.sundry/->input","src.components.chat/history","msgs","iter__4582__auto__","s__38328","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__38330","cljs.core/chunk-buffer","i__38329","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38327","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/random-uuid","src.sundry.epoch__GT_local","src.components.chat/page","src.sundry/<sub","src.components.chat/mount","src.tube/connect","src.tube/join","cljs.core/chunk-first"],"sourcesContent":["(ns src.components.chat\n  (:require [re-frame.core :as re-frame]\n            [reagent.core :as reagent]\n            [src.sundry :refer [>evt <sub\n                                ->clj ->js\n                                ->input\n                                now epoch->local]]\n            [src.tube :as tube]))\n\n(defonce ^:private tube-event-type \"chat\")\n\n(defn create-msg [{:keys [nick-name avatar]} msg]\n  {:body msg\n   :avatar avatar\n   :publish-time (now)\n   :nick-name nick-name})\n\n(re-frame/reg-event-fx\n ::send-msg\n (fn [{:keys [db]} [_ msg]]\n   {::dispatch! (create-msg db msg)}))\n\n(re-frame/reg-fx\n ::dispatch!\n (fn [msg]\n   (tube/push tube-event-type (->js msg))))\n\n(re-frame/reg-event-db\n ::populate-msg\n (fn [db [_ msg]]\n   (update db :chat-history conj msg)))\n\n(re-frame/reg-sub\n ::chat-history\n (fn [db]\n   (:chat-history db)))\n\n(defn receive-msg\n  [resp]\n  (>evt [::populate-msg (->clj resp)]))\n\n(defn chat-box []\n  (let [value (reagent/atom nil)]\n    (fn []\n      [:form.form-group.row.chat-box {:on-submit (fn [e]\n                                                   (.preventDefault e)\n                                                   (>evt [::send-msg @value])\n                                                   (reset! value \"\"))}\n       [:input.no-resize.chat-input.col-9 {:placeholder \"Type your msg...\"\n                                           :on-change   #(reset! value (->input %))\n                                           :value       @value}]\n\n       [:button.chat-submit.border-4.col-3 {:type :submit} \"Send\"]])))\n\n(defn history\n  [msgs]\n  [:div.chat-history\n   [:ul\n    (for [msg msgs]\n      ^{:key (str (random-uuid))}\n      [:li (:body msg)\n       [:img {:src (:avatar msg)}]\n       [:span (str \" by \" (:nick-name msg))]\n       [:span (str \" at \" (epoch->local (:publish-time msg)\n                                        true))]])]])\n\n(defn page []\n  (fn []\n    [:div.chat\n     [history (<sub [::chat-history])]\n     [chat-box]]))\n\n(defn mount []\n  (tube/connect)\n  (tube/join tube-event-type receive-msg))\n"]}