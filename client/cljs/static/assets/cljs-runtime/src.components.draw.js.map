{"version":3,"sources":["src/components/draw.cljs"],"mappings":"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","names":["js/src","js/src.components","js/src.components.draw","js/src.components.draw.tube-event-type","src.components.draw/tube-event-type","src.components.draw/current-path","cljs.core.atom","src.components.draw/path-buffer","src.components.draw/buffer-duration-ms","src.components.draw/current-time","js/Date","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","src.components.draw/new-path","p__38337","vec__38339","cljs.core.nth","seq38336","self__4777__auto__","cljs.core/seq","options","js/module$node_modules$paper$dist$paper_full.Path","cljs.core/clj->js","cljs.core.merge","src.components.draw/new-path-buffer","p__38343","vec__38344","seq38342","cljs.core/deref","src.components.draw/external-current-path","src.components.draw/external-current-path-id","src.components.draw/new-external-path","path-id","segments","cljs.core/reset!","src.components.draw.new_path","src.components.draw/draw-received-drawing","path-data","map__38347","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","timestamp","src.sundry/->clj","cljs.core._EQ_","src.sundry/->js","re_frame.core.reg_event_fx","p__38349","vec__38350","db","_","path","G__38353","G__38354","re-frame.core/reg-fx","src.tube.push","src.components.draw/clear-path-buffer!","src.components.draw/send-buffer!","cljs.core/not-empty","G__38355","src.sundry/>evt","src.components.draw/send-buffer-if-time!","src.components.draw/serialize-point","point","src.components.draw/add-to-buffer!","cljs.core.swap_BANG_","cljs.core/update","cljs.core/conj","src.components.draw/add-to-current-path!","src.components.draw/on-mouse-down","event","src.components.draw.new_path_buffer","src.components.draw/on-mouse-drag","src.components.draw/on-mouse-up","src.components.draw/page","dom-node","reagent.core.atom","reagent.core/create-class","this","reagent.dom/dom-node","js/module$node_modules$paper$dist$paper_full","js/document.getElementById","js/module$node_modules$paper$dist$paper_full.view","src.components.chat/page","src.components.draw/mount","src.tube/connect","src.tube/join","src.components.chat/mount"],"sourcesContent":["(ns src.components.draw\n  (:require [\"paper\" :as paper]\n            [re-frame.core :as re-frame]\n            [reagent.core :as reagent]\n            [reagent.dom :as reagent-dom]\n            [src.components.chat :as chat]\n            [src.sundry :refer [>evt ->clj ->js]]\n            [src.tube :as tube]))\n\n(defonce ^:private tube-event-type \"draw\")\n\n(def current-path (atom nil))\n(def path-buffer (atom nil))\n(def buffer-duration-ms 30)\n\n(defn current-time []\n  (.getTime (js/Date.)))\n\n(defn new-path [& [options]]\n  (new paper/Path (clj->js (merge {:strokeColor \"red\"\n                                   :strokeWidth 4\n                                   :strokeJoin  \"round\"\n                                   :strokeCap   \"round\"}\n                                  options))))\n\n(defn new-path-buffer [& [options]]\n  (merge {:segments  []\n          :path-id   (.-id @current-path)\n          :timestamp (current-time)}\n         options))\n\n;; temporary: draw sent path\n(def external-current-path (atom nil))\n(def external-current-path-id (atom nil))\n\n(defn new-external-path\n  [path-id segments]\n  (reset! external-current-path-id path-id)\n  (reset! external-current-path (new-path {:segments segments})))\n\n(defn draw-received-drawing\n  [path-data]\n  (let [{:keys [segments path-id timestamp]} (->clj path-data)]\n    (if (= @external-current-path-id path-id)\n      (.addSegments @external-current-path (->js segments))\n      (new-external-path path-id segments))))\n;;;;;;\n\n;;; effects\n\n(re-frame/reg-event-fx\n ::send-new-path\n (fn [db [_ path]]\n   {::send! path}))\n\n(re-frame/reg-fx\n ::send!\n (fn [path]\n   (tube/push tube-event-type path)))\n\n(defn clear-path-buffer! []\n  (reset! path-buffer (new-path-buffer)))\n\n(defn send-buffer! []\n  (when (not-empty (:segments @path-buffer))\n    (>evt [::send-new-path @path-buffer])\n    (clear-path-buffer!)))\n\n(defn send-buffer-if-time! []\n  (if (> (- (current-time)\n            (:timestamp @path-buffer))\n         buffer-duration-ms)\n    (send-buffer!)))\n\n(defn serialize-point\n  [point]\n  [(.-x point) (.-y point)])\n\n(defn add-to-buffer!\n  [point]\n  (swap! path-buffer update :segments conj (serialize-point point)))\n\n(defn add-to-current-path!\n  [point]\n  (-> @current-path\n      (.add point)\n      .smooth))\n\n(defn on-mouse-down\n  [event]\n  (let [point (.-point event)]\n    (reset! current-path (new-path {:segments [point]}))\n    (reset! path-buffer (new-path-buffer {:segments [(serialize-point point)]}))))\n\n(defn on-mouse-drag\n  [event]\n  (let [point (.-point event)]\n    (add-to-current-path! point)\n    (add-to-buffer! point)\n    (send-buffer-if-time!)))\n\n(defn on-mouse-up\n  [event]\n  (let [point (.-point event)]\n    (add-to-current-path! point)\n    (send-buffer!)))\n\n(defn page []\n  (let [dom-node (reagent/atom nil)]\n    (reagent/create-class\n     {:component-did-mount\n      (fn [this]\n        (reset! dom-node (reagent-dom/dom-node this))\n        (.setup paper (js/document.getElementById \"drawing-board\"))\n        (set! (.-onMouseUp paper/view)   on-mouse-up)\n        (set! (.-onMouseDown paper/view) on-mouse-down)\n        (set! (.-onMouseDrag paper/view) on-mouse-drag)\n        (new-external-path 0 []))\n\n      :reagent-render\n      (fn []\n        [:div.row\n         [:div.xs-1.sm-2.md-2]\n         [:div.xs-10.sm-8.md-8\n          [:div.board.row\n           [:div.xs-12.lg-8\n            [:canvas#drawing-board]]\n           [:div.xs-12.lg-4\n            [chat/page]]]]\n         [:div.xs-1.sm-2.md-2]])})))\n\n(defn mount []\n  (tube/connect)\n  (tube/join tube-event-type draw-received-drawing)\n  (chat/mount))\n"]}