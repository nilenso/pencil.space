{
"version":3,
"file":"goog.i18n.messageformat.js",
"lineCount":439,
"mappings":"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",
"sources":["goog/i18n/messageformat.js"],
"sourcesContent":["// Copyright 2010 The Closure Library Authors. All Rights Reserved\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Message/plural format library with locale support.\n *\n * Message format grammar:\n *\n * messageFormatPattern := string ( \"{\" messageFormatElement \"}\" string )*\n * messageFormatElement := argumentIndex [ \",\" elementFormat ]\n * elementFormat := \"plural\" \",\" pluralStyle\n *                  | \"selectordinal\" \",\" ordinalStyle\n *                  | \"select\" \",\" selectStyle\n * pluralStyle :=  pluralFormatPattern\n * ordinalStyle :=  selectFormatPattern\n * selectStyle :=  selectFormatPattern\n * pluralFormatPattern := [ \"offset\" \":\" offsetIndex ] pluralForms*\n * selectFormatPattern := pluralForms*\n * pluralForms := stringKey \"{\" ( \"{\" messageFormatElement \"}\"|string )* \"}\"\n *\n * This is a subset of the ICU MessageFormatSyntax:\n *   http://userguide.icu-project.org/formatparse/messages\n * See also http://go/plurals and http://go/ordinals for internal details.\n *\n *\n * Message example:\n *\n * I see {NUM_PEOPLE, plural, offset:1\n *         =0 {no one at all}\n *         =1 {{WHO}}\n *         one {{WHO} and one other person}\n *         other {{WHO} and # other people}}\n * in {PLACE}.\n *\n * Calling format({'NUM_PEOPLE': 2, 'WHO': 'Mark', 'PLACE': 'Athens'}) would\n * produce \"I see Mark and one other person in Athens.\" as output.\n *\n * OR:\n *\n * {NUM_FLOOR, selectordinal,\n *   one {Take the elevator to the #st floor.}\n *   two {Take the elevator to the #nd floor.}\n *   few {Take the elevator to the #rd floor.}\n *   other {Take the elevator to the #th floor.}}\n *\n * Calling format({'NUM_FLOOR': 22}) would produce\n * \"Take the elevator to the 22nd floor\".\n *\n * See messageformat_test.html for more examples.\n */\n\ngoog.provide('goog.i18n.MessageFormat');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.i18n.CompactNumberFormatSymbols');\ngoog.require('goog.i18n.NumberFormat');\ngoog.require('goog.i18n.NumberFormatSymbols');\ngoog.require('goog.i18n.ordinalRules');\ngoog.require('goog.i18n.pluralRules');\n\n\n\n/**\n * Constructor of MessageFormat.\n * @param {string} pattern The pattern we parse and apply positional parameters\n *     to.\n * @constructor\n * @final\n */\ngoog.i18n.MessageFormat = function(pattern) {\n  /**\n   * The pattern we parse and apply positional parameters to.\n   * @type {?string}\n   * @private\n   */\n  this.pattern_ = pattern;\n\n  /**\n   * All encountered literals during parse stage. Indices tell us the order of\n   * replacement.\n   * @type {?Array<string>}\n   * @private\n   */\n  this.initialLiterals_ = null;\n\n  /**\n   * Working array with all encountered literals during parse and format stages.\n   * Indices tell us the order of replacement.\n   * @type {?Array<string>}\n   * @private\n   */\n  this.literals_ = null;\n\n  /**\n   * Input pattern gets parsed into objects for faster formatting.\n   * @type {?Array<!goog.i18n.MessageFormat.BlockTypeVal_>}\n   * @private\n   */\n  this.parsedPattern_ = null;\n\n  /**\n   * Locale aware number formatter.\n   * @type {!goog.i18n.NumberFormat}\n   * @private\n   */\n  this.numberFormatter_ = goog.i18n.MessageFormat.getNumberFormatter_();\n};\n\n\n/**\n * Locale associated with the most recently created NumberFormat.\n * @type {?Object}\n * @private\n */\ngoog.i18n.MessageFormat.numberFormatterSymbols_ = null;\n\n\n/**\n * Locale associated with the most recently created NumberFormat.\n * @type {?Object}\n * @private\n */\ngoog.i18n.MessageFormat.compactNumberFormatterSymbols_ = null;\n\n\n/**\n * Locale aware number formatter. Reference to the most recently created\n * NumberFormat for sharing between MessageFormat instances.\n * @type {?goog.i18n.NumberFormat}\n * @private\n */\ngoog.i18n.MessageFormat.numberFormatter_ = null;\n\n\n/**\n * Literal strings, including '', are replaced with \\uFDDF_x_ for\n * parsing purposes, and recovered during format phase.\n * \\uFDDF is a Unicode nonprinting character, not expected to be found in the\n * typical message.\n * @type {string}\n * @private\n */\ngoog.i18n.MessageFormat.LITERAL_PLACEHOLDER_ = '\\uFDDF_';\n\n\n/**\n * Marks a string and block during parsing.\n * @enum {number}\n * @private\n */\ngoog.i18n.MessageFormat.Element_ = {\n  STRING: 0,\n  BLOCK: 1\n};\n\n\n/**\n * Block type.\n * @enum {number}\n * @private\n */\ngoog.i18n.MessageFormat.BlockType_ = {\n  PLURAL: 0,\n  ORDINAL: 1,\n  SELECT: 2,\n  SIMPLE: 3,\n  STRING: 4,\n  UNKNOWN: 5\n};\n\n\n/**\n * Mandatory option in both select and plural form.\n * @type {string}\n * @private\n */\ngoog.i18n.MessageFormat.OTHER_ = 'other';\n\n\n/**\n * Regular expression for looking for string literals.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.REGEX_LITERAL_ = new RegExp(\"'([{}#].*?)'\", 'g');\n\n\n/**\n * Regular expression for looking for '' in the message.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.REGEX_DOUBLE_APOSTROPHE_ = new RegExp(\"''\", 'g');\n\n/** @typedef {{ type: !goog.i18n.MessageFormat.Element_, value: ? }} */\ngoog.i18n.MessageFormat.TypeVal_;\n\n/** @typedef {{ type: !goog.i18n.MessageFormat.BlockType_, value: ? }} */\ngoog.i18n.MessageFormat.BlockTypeVal_;\n\n\n/**\n * Gets the a NumberFormat instance for the current locale.\n * If the locale is the same as the previous invocation, returns the same\n * NumberFormat instance. Otherwise, creates a new one.\n * @return {!goog.i18n.NumberFormat}\n * @private\n */\ngoog.i18n.MessageFormat.getNumberFormatter_ = function() {\n  var currentSymbols = goog.i18n.NumberFormatSymbols;\n  var currentCompactSymbols = goog.i18n.CompactNumberFormatSymbols;\n\n  if (goog.i18n.MessageFormat.numberFormatterSymbols_ !== currentSymbols ||\n      goog.i18n.MessageFormat.compactNumberFormatterSymbols_ !==\n          currentCompactSymbols) {\n    goog.i18n.MessageFormat.numberFormatterSymbols_ = currentSymbols;\n    goog.i18n.MessageFormat.compactNumberFormatterSymbols_ =\n        currentCompactSymbols;\n    goog.i18n.MessageFormat.numberFormatter_ =\n        new goog.i18n.NumberFormat(goog.i18n.NumberFormat.Format.DECIMAL);\n  }\n\n  return /** @type {!goog.i18n.NumberFormat} */ (\n      goog.i18n.MessageFormat.numberFormatter_);\n};\n\n\n/**\n * Formats a message, treating '#' with special meaning representing\n * the number (plural_variable - offset).\n * @param {!Object} namedParameters Parameters that either\n *     influence the formatting or are used as actual data.\n *     I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}),\n *     object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters.\n *     1st parameter could mean 5 people, which could influence plural format,\n *     and 2nd parameter is just a data to be printed out in proper position.\n * @return {string} Formatted message.\n */\ngoog.i18n.MessageFormat.prototype.format = function(namedParameters) {\n  return this.format_(namedParameters, false);\n};\n\n\n/**\n * Formats a message, treating '#' as literary character.\n * @param {!Object} namedParameters Parameters that either\n *     influence the formatting or are used as actual data.\n *     I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}),\n *     object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters.\n *     1st parameter could mean 5 people, which could influence plural format,\n *     and 2nd parameter is just a data to be printed out in proper position.\n * @return {string} Formatted message.\n */\ngoog.i18n.MessageFormat.prototype.formatIgnoringPound = function(\n    namedParameters) {\n  return this.format_(namedParameters, true);\n};\n\n\n/**\n * Formats a message.\n * @param {!Object} namedParameters Parameters that either\n *     influence the formatting or are used as actual data.\n *     I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}),\n *     object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters.\n *     1st parameter could mean 5 people, which could influence plural format,\n *     and 2nd parameter is just a data to be printed out in proper position.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @return {string} Formatted message.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.format_ = function(\n    namedParameters, ignorePound) {\n  this.init_();\n  if (!this.parsedPattern_ || this.parsedPattern_.length == 0) {\n    return '';\n  }\n  this.literals_ = goog.array.clone(this.initialLiterals_);\n\n  var result = [];\n  this.formatBlock_(this.parsedPattern_, namedParameters, ignorePound, result);\n  var message = result.join('');\n\n  if (!ignorePound) {\n    goog.asserts.assert(message.search('#') == -1, 'Not all # were replaced.');\n  }\n\n  while (this.literals_.length > 0) {\n    message = message.replace(\n        this.buildPlaceholder_(this.literals_), this.literals_.pop());\n  }\n\n  return message;\n};\n\n\n/**\n * Parses generic block and returns a formatted string.\n * @param {!Array<!goog.i18n.MessageFormat.BlockTypeVal_>} parsedPattern\n *     Holds parsed tree.\n * @param {!Object} namedParameters Parameters that either influence\n *     the formatting or are used as actual data.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatBlock_ = function(\n    parsedPattern, namedParameters, ignorePound, result) {\n  for (var i = 0; i < parsedPattern.length; i++) {\n    switch (parsedPattern[i].type) {\n      case goog.i18n.MessageFormat.BlockType_.STRING:\n        result.push(parsedPattern[i].value);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.SIMPLE:\n        var pattern = parsedPattern[i].value;\n        this.formatSimplePlaceholder_(pattern, namedParameters, result);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.SELECT:\n        var pattern = parsedPattern[i].value;\n        this.formatSelectBlock_(pattern, namedParameters, ignorePound, result);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.PLURAL:\n        var pattern = parsedPattern[i].value;\n        this.formatPluralOrdinalBlock_(\n            pattern, namedParameters, goog.i18n.pluralRules.select, ignorePound,\n            result);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.ORDINAL:\n        var pattern = parsedPattern[i].value;\n        this.formatPluralOrdinalBlock_(\n            pattern, namedParameters, goog.i18n.ordinalRules.select,\n            ignorePound, result);\n        break;\n      default:\n        goog.asserts.fail('Unrecognized block type: ' + parsedPattern[i].type);\n    }\n  }\n};\n\n\n/**\n * Formats simple placeholder.\n * @param {!Object} parsedPattern JSON object containing placeholder info.\n * @param {!Object} namedParameters Parameters that are used as actual data.\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatSimplePlaceholder_ = function(\n    parsedPattern, namedParameters, result) {\n  var value = namedParameters[parsedPattern];\n  if (value === undefined) {\n    result.push('Undefined parameter - ' + parsedPattern);\n    return;\n  }\n\n  // Don't push the value yet, it may contain any of # { } in it which\n  // will break formatter. Insert a placeholder and replace at the end.\n  this.literals_.push(value);\n  result.push(this.buildPlaceholder_(this.literals_));\n};\n\n\n/**\n * Formats select block. Only one option is selected.\n * @param {{argumentIndex:?}} parsedPattern JSON object containing select\n *     block info.\n * @param {!Object} namedParameters Parameters that either influence\n *     the formatting or are used as actual data.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatSelectBlock_ = function(\n    parsedPattern, namedParameters, ignorePound, result) {\n  var argumentIndex = parsedPattern.argumentIndex;\n  if (namedParameters[argumentIndex] === undefined) {\n    result.push('Undefined parameter - ' + argumentIndex);\n    return;\n  }\n\n  var option = parsedPattern[namedParameters[argumentIndex]];\n  if (option === undefined) {\n    option = parsedPattern[goog.i18n.MessageFormat.OTHER_];\n    goog.asserts.assertArray(\n        option, 'Invalid option or missing other option for select block.');\n  }\n\n  this.formatBlock_(option, namedParameters, ignorePound, result);\n};\n\n\n/**\n * Formats plural or selectordinal block. Only one option is selected and all #\n * are replaced.\n * @param {{argumentIndex, argumentOffset}} parsedPattern JSON object\n *     containing plural block info.\n * @param {!Object} namedParameters Parameters that either influence\n *     the formatting or are used as actual data.\n * @param {function(number, number=):string} pluralSelector  A select function\n *     from goog.i18n.pluralRules or goog.i18n.ordinalRules which determines\n *     which plural/ordinal form to use based on the input number's cardinality.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatPluralOrdinalBlock_ = function(\n    parsedPattern, namedParameters, pluralSelector, ignorePound, result) {\n  var argumentIndex = parsedPattern.argumentIndex;\n  var argumentOffset = parsedPattern.argumentOffset;\n  var pluralValue = +namedParameters[argumentIndex];\n  if (isNaN(pluralValue)) {\n    // TODO(user): Distinguish between undefined and invalid parameters.\n    result.push('Undefined or invalid parameter - ' + argumentIndex);\n    return;\n  }\n  var diff = pluralValue - argumentOffset;\n\n  // Check if there is an exact match.\n  var option = parsedPattern[namedParameters[argumentIndex]];\n  if (option === undefined) {\n    var item = pluralSelector(Math.abs(diff));\n    goog.asserts.assertString(item, 'Invalid plural key.');\n\n    option = parsedPattern[item];\n\n    // If option is not provided fall back to \"other\".\n    if (option === undefined) {\n      option = parsedPattern[goog.i18n.MessageFormat.OTHER_];\n    }\n\n    goog.asserts.assertArray(\n        option, 'Invalid option or missing other option for plural block.');\n  }\n\n  var pluralResult = [];\n  this.formatBlock_(option, namedParameters, ignorePound, pluralResult);\n  var plural = pluralResult.join('');\n  goog.asserts.assertString(plural, 'Empty block in plural.');\n  if (ignorePound) {\n    result.push(plural);\n  } else {\n    var localeAwareDiff = this.numberFormatter_.format(diff);\n    result.push(plural.replace(/#/g, localeAwareDiff));\n  }\n};\n\n\n/**\n * Set up the MessageFormat.\n * Parses input pattern into an array, for faster reformatting with\n * different input parameters.\n * Parsing is locale independent.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.init_ = function() {\n  if (this.pattern_) {\n    this.initialLiterals_ = [];\n    var pattern = this.insertPlaceholders_(this.pattern_);\n\n    this.parsedPattern_ = this.parseBlock_(pattern);\n    this.pattern_ = null;\n  }\n};\n\n\n/**\n * Replaces string literals with literal placeholders.\n * Literals are string of the form '}...', '{...' and '#...' where ... is\n * set of characters not containing '\n * Builds a dictionary so we can recover literals during format phase.\n * @param {string} pattern Pattern to clean up.\n * @return {string} Pattern with literals replaced with placeholders.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.insertPlaceholders_ = function(pattern) {\n  var literals = this.initialLiterals_;\n  var buildPlaceholder = goog.bind(this.buildPlaceholder_, this);\n\n  // First replace '' with single quote placeholder since they can be found\n  // inside other literals.\n  pattern = pattern.replace(\n      goog.i18n.MessageFormat.REGEX_DOUBLE_APOSTROPHE_, function() {\n        literals.push(\"'\");\n        return buildPlaceholder(literals);\n      });\n\n  pattern = pattern.replace(\n      goog.i18n.MessageFormat.REGEX_LITERAL_, function(match, text) {\n        literals.push(text);\n        return buildPlaceholder(literals);\n      });\n\n  return pattern;\n};\n\n\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * @param {string} pattern (sub)Pattern to be broken.\n * @return {!Array<goog.i18n.MessageFormat.TypeVal_>}\n * @private\n */\ngoog.i18n.MessageFormat.prototype.extractParts_ = function(pattern) {\n  var prevPos = 0;\n  var braceStack = [];\n  var results = [];\n\n  var braces = /[{}]/g;\n  braces.lastIndex = 0;  // lastIndex doesn't get set to 0 so we have to.\n  var match;\n\n  while (match = braces.exec(pattern)) {\n    var pos = match.index;\n    if (match[0] == '}') {\n      var brace = braceStack.pop();\n      goog.asserts.assert(\n          brace !== undefined && brace == '{', 'No matching { for }.');\n\n      if (braceStack.length == 0) {\n        // End of the block.\n        var part = {};\n        part.type = goog.i18n.MessageFormat.Element_.BLOCK;\n        part.value = pattern.substring(prevPos, pos);\n        results.push(part);\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        var substring = pattern.substring(prevPos, pos);\n        if (substring != '') {\n          results.push({\n            type: goog.i18n.MessageFormat.Element_.STRING,\n            value: substring\n          });\n        }\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n\n  // Take care of the final string, and check if the braceStack is empty.\n  goog.asserts.assert(\n      braceStack.length == 0, 'There are mismatched { or } in the pattern.');\n\n  var substring = pattern.substring(prevPos);\n  if (substring != '') {\n    results.push(\n        {type: goog.i18n.MessageFormat.Element_.STRING, value: substring});\n  }\n\n  return results;\n};\n\n\n/**\n * A regular expression to parse the plural block, extracting the argument\n * index and offset (if any).\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.PLURAL_BLOCK_RE_ =\n    /^\\s*(\\w+)\\s*,\\s*plural\\s*,(?:\\s*offset:(\\d+))?/;\n\n\n/**\n * A regular expression to parse the ordinal block, extracting the argument\n * index.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.ORDINAL_BLOCK_RE_ = /^\\s*(\\w+)\\s*,\\s*selectordinal\\s*,/;\n\n\n/**\n * A regular expression to parse the select block, extracting the argument\n * index.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.SELECT_BLOCK_RE_ = /^\\s*(\\w+)\\s*,\\s*select\\s*,/;\n\n\n/**\n * Detects which type of a block is the pattern.\n * @param {string} pattern Content of the block.\n * @return {goog.i18n.MessageFormat.BlockType_} One of the block types.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseBlockType_ = function(pattern) {\n  if (goog.i18n.MessageFormat.PLURAL_BLOCK_RE_.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.PLURAL;\n  }\n\n  if (goog.i18n.MessageFormat.ORDINAL_BLOCK_RE_.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.ORDINAL;\n  }\n\n  if (goog.i18n.MessageFormat.SELECT_BLOCK_RE_.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.SELECT;\n  }\n\n  if (/^\\s*\\w+\\s*/.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.SIMPLE;\n  }\n\n  return goog.i18n.MessageFormat.BlockType_.UNKNOWN;\n};\n\n\n/**\n * Parses generic block.\n * @param {string} pattern Content of the block to parse.\n * @return {!Array<!goog.i18n.MessageFormat.BlockTypeVal_>} Subblocks marked as\n *     strings, select...\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseBlock_ = function(pattern) {\n  var result = [];\n  var parts = this.extractParts_(pattern);\n  for (var i = 0; i < parts.length; i++) {\n    var block = {};\n    if (goog.i18n.MessageFormat.Element_.STRING == parts[i].type) {\n      block.type = goog.i18n.MessageFormat.BlockType_.STRING;\n      block.value = parts[i].value;\n    } else if (goog.i18n.MessageFormat.Element_.BLOCK == parts[i].type) {\n      var blockType = this.parseBlockType_(parts[i].value);\n\n      switch (blockType) {\n        case goog.i18n.MessageFormat.BlockType_.SELECT:\n          block.type = goog.i18n.MessageFormat.BlockType_.SELECT;\n          block.value = this.parseSelectBlock_(parts[i].value);\n          break;\n        case goog.i18n.MessageFormat.BlockType_.PLURAL:\n          block.type = goog.i18n.MessageFormat.BlockType_.PLURAL;\n          block.value = this.parsePluralBlock_(parts[i].value);\n          break;\n        case goog.i18n.MessageFormat.BlockType_.ORDINAL:\n          block.type = goog.i18n.MessageFormat.BlockType_.ORDINAL;\n          block.value = this.parseOrdinalBlock_(parts[i].value);\n          break;\n        case goog.i18n.MessageFormat.BlockType_.SIMPLE:\n          block.type = goog.i18n.MessageFormat.BlockType_.SIMPLE;\n          block.value = parts[i].value;\n          break;\n        default:\n          goog.asserts.fail(\n              'Unknown block type for pattern: ' + parts[i].value);\n      }\n    } else {\n      goog.asserts.fail('Unknown part of the pattern.');\n    }\n    result.push(block);\n  }\n\n  return result;\n};\n\n\n/**\n * Parses a select type of a block and produces JSON object for it.\n * @param {string} pattern Subpattern that needs to be parsed as select pattern.\n * @return {!Object<string, !Array<!goog.i18n.MessageFormat.BlockTypeVal_>>}\n *     Object with select block info.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseSelectBlock_ = function(pattern) {\n  var argumentIndex = '';\n  var replaceRegex = goog.i18n.MessageFormat.SELECT_BLOCK_RE_;\n  pattern = pattern.replace(replaceRegex, function(string, name) {\n    argumentIndex = name;\n    return '';\n  });\n  var result = {};\n  result.argumentIndex = argumentIndex;\n\n  var parts = this.extractParts_(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  var pos = 0;\n  while (pos < parts.length) {\n    var key = parts[pos].value;\n    goog.asserts.assertString(key, 'Missing select key element.');\n\n    pos++;\n    goog.asserts.assert(\n        pos < parts.length, 'Missing or invalid select value element.');\n\n    var value;\n    if (goog.i18n.MessageFormat.Element_.BLOCK == parts[pos].type) {\n      value = this.parseBlock_(parts[pos].value);\n    } else {\n      goog.asserts.fail('Expected block type.');\n    }\n    result[key.replace(/\\s/g, '')] = value;\n    pos++;\n  }\n\n  goog.asserts.assertArray(\n      result[goog.i18n.MessageFormat.OTHER_],\n      'Missing other key in select statement.');\n  return result;\n};\n\n\n/**\n * Parses a plural type of a block and produces JSON object for it.\n * @param {string} pattern Subpattern that needs to be parsed as plural pattern.\n * @return {!Object<string, !Array<!goog.i18n.MessageFormat.BlockTypeVal_>>}\n *     Object with select block info.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parsePluralBlock_ = function(pattern) {\n  var argumentIndex = '';\n  var argumentOffset = 0;\n  var replaceRegex = goog.i18n.MessageFormat.PLURAL_BLOCK_RE_;\n  pattern = pattern.replace(replaceRegex, function(string, name, offset) {\n    argumentIndex = name;\n    if (offset) {\n      argumentOffset = parseInt(offset, 10);\n    }\n    return '';\n  });\n\n  var result = {};\n  result.argumentIndex = argumentIndex;\n  result.argumentOffset = argumentOffset;\n\n  var parts = this.extractParts_(pattern);\n  // Looking for (key block)+ sequence.\n  var pos = 0;\n  while (pos < parts.length) {\n    var key = parts[pos].value;\n    goog.asserts.assertString(key, 'Missing plural key element.');\n\n    pos++;\n    goog.asserts.assert(\n        pos < parts.length, 'Missing or invalid plural value element.');\n\n    var value;\n    if (goog.i18n.MessageFormat.Element_.BLOCK == parts[pos].type) {\n      value = this.parseBlock_(parts[pos].value);\n    } else {\n      goog.asserts.fail('Expected block type.');\n    }\n    result[key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1')] = value;\n    pos++;\n  }\n\n  goog.asserts.assertArray(\n      result[goog.i18n.MessageFormat.OTHER_],\n      'Missing other key in plural statement.');\n\n  return result;\n};\n\n\n/**\n * Parses an ordinal type of a block and produces JSON object for it.\n * For example the input string:\n *  '{FOO, selectordinal, one {Message A}other {Message B}}'\n * Should result in the output object:\n * {\n *   argumentIndex: 'FOO',\n *   argumentOffest: 0,\n *   one: [ { type: 4, value: 'Message A' } ],\n *   other: [ { type: 4, value: 'Message B' } ]\n * }\n * @param {string} pattern Subpattern that needs to be parsed as plural pattern.\n * @return {!Object} Object with select block info.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseOrdinalBlock_ = function(pattern) {\n  var argumentIndex = '';\n  var replaceRegex = goog.i18n.MessageFormat.ORDINAL_BLOCK_RE_;\n  pattern = pattern.replace(replaceRegex, function(string, name) {\n    argumentIndex = name;\n    return '';\n  });\n\n  var result = {};\n  result.argumentIndex = argumentIndex;\n  result.argumentOffset = 0;\n\n  var parts = this.extractParts_(pattern);\n  // Looking for (key block)+ sequence.\n  var pos = 0;\n  while (pos < parts.length) {\n    var key = parts[pos].value;\n    goog.asserts.assertString(key, 'Missing ordinal key element.');\n\n    pos++;\n    goog.asserts.assert(\n        pos < parts.length, 'Missing or invalid ordinal value element.');\n\n    if (goog.i18n.MessageFormat.Element_.BLOCK == parts[pos].type) {\n      var value = this.parseBlock_(parts[pos].value);\n    } else {\n      goog.asserts.fail('Expected block type.');\n    }\n    result[key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1')] = value;\n    pos++;\n  }\n\n  goog.asserts.assertArray(\n      result[goog.i18n.MessageFormat.OTHER_],\n      'Missing other key in selectordinal statement.');\n\n  return result;\n};\n\n\n/**\n * Builds a placeholder from the last index of the array.\n * @param {!Array<string>} literals All literals encountered during parse.\n * @return {string} \\uFDDF_ + last index + _.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.buildPlaceholder_ = function(literals) {\n  goog.asserts.assert(literals.length > 0, 'Literal array is empty.');\n\n  var index = (literals.length - 1).toString(10);\n  return goog.i18n.MessageFormat.LITERAL_PLACEHOLDER_ + index + '_';\n};\n"],
"names":["goog","provide","require","i18n","MessageFormat","goog.i18n.MessageFormat","pattern","pattern_","initialLiterals_","literals_","parsedPattern_","numberFormatter_","getNumberFormatter_","numberFormatterSymbols_","compactNumberFormatterSymbols_","LITERAL_PLACEHOLDER_","Element_","STRING","BLOCK","BlockType_","PLURAL","ORDINAL","SELECT","SIMPLE","UNKNOWN","OTHER_","REGEX_LITERAL_","RegExp","REGEX_DOUBLE_APOSTROPHE_","TypeVal_","BlockTypeVal_","goog.i18n.MessageFormat.getNumberFormatter_","currentSymbols","NumberFormatSymbols","currentCompactSymbols","CompactNumberFormatSymbols","NumberFormat","Format","DECIMAL","prototype","format","goog.i18n.MessageFormat.prototype.format","namedParameters","format_","formatIgnoringPound","goog.i18n.MessageFormat.prototype.formatIgnoringPound","goog.i18n.MessageFormat.prototype.format_","ignorePound","init_","length","array","clone","result","formatBlock_","message","join","asserts","assert","search","replace","buildPlaceholder_","pop","goog.i18n.MessageFormat.prototype.formatBlock_","parsedPattern","i","type","push","value","formatSimplePlaceholder_","formatSelectBlock_","formatPluralOrdinalBlock_","pluralRules","select","ordinalRules","fail","goog.i18n.MessageFormat.prototype.formatSimplePlaceholder_","undefined","goog.i18n.MessageFormat.prototype.formatSelectBlock_","argumentIndex","option","assertArray","goog.i18n.MessageFormat.prototype.formatPluralOrdinalBlock_","pluralSelector","argumentOffset","pluralValue","isNaN","diff","item","Math","abs","assertString","pluralResult","plural","localeAwareDiff","goog.i18n.MessageFormat.prototype.init_","insertPlaceholders_","parseBlock_","goog.i18n.MessageFormat.prototype.insertPlaceholders_","literals","buildPlaceholder","bind","match","text","extractParts_","goog.i18n.MessageFormat.prototype.extractParts_","prevPos","braceStack","results","braces","lastIndex","exec","pos","index","brace","part","substring","PLURAL_BLOCK_RE_","ORDINAL_BLOCK_RE_","SELECT_BLOCK_RE_","parseBlockType_","goog.i18n.MessageFormat.prototype.parseBlockType_","test","goog.i18n.MessageFormat.prototype.parseBlock_","parts","block","blockType","parseSelectBlock_","parsePluralBlock_","parseOrdinalBlock_","goog.i18n.MessageFormat.prototype.parseSelectBlock_","replaceRegex","string","name","key","goog.i18n.MessageFormat.prototype.parsePluralBlock_","offset","parseInt","goog.i18n.MessageFormat.prototype.parseOrdinalBlock_","goog.i18n.MessageFormat.prototype.buildPlaceholder_","toString"]
}
