{"version":3,"sources":["src/routes.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","p__34171","vec__34172","cljs.core.nth","db","_","name","cljs.core.assoc","src.routes/routes","src.components.home/page","params","js/console.log","src.components.chat/page","src.components.chat/mount","src.components.lobby/page","src.components.draw/page","src.components.draw/mount","src.routes/router","reitit.frontend.router","reitit.coercion.spec/coercion","G__34179","G__34180","re-frame.core/reg-sub","p__34181","p__34182","map__34183","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__34184","current-route","new-match","controllers","reitit.frontend.controllers/apply-controllers","src.routes/on-navigate","G__34188","src.sundry/>evt","p__34189","map__34190","src.routes/router-component","router","src.sundry/<sub","src.routes/init","reitit.frontend.easy/start!","src.routes/mount","page-root","re-frame.core/clear-subscription-cache!","reagent.dom.render"],"sourcesContent":["(ns src.routes\n  (:require [re-frame.core :as re-frame]\n            [reagent.core :as reagent]\n            [reagent.dom :as reagent-dom]\n            [reitit.coercion.spec :as rss]\n            [reitit.core :as r]\n            [reitit.frontend :as rf]\n            [reitit.frontend.controllers :as rfc]\n            [reitit.frontend.easy :as rfe]\n            [src.components.chat :as chat]\n            [src.components.draw :as draw]\n            [src.components.home :as home]\n            [src.components.lobby :as lobby]\n            [src.db :as db]\n            [src.sundry :refer [>evt <sub]]\n            [src.tube :as tube]))\n\n(re-frame/reg-event-db\n  ::update-game\n  (fn [db [_ name]]\n    (assoc db :game :starting :id name)))\n\n\n(def routes\n  [\"/\"\n   [\"\"\n    {:name ::home\n     :view home/page\n     :controllers\n     [{:start (fn [& params] (js/console.log \"Entering home page\"))\n       :stop  (fn [& params] (js/console.log \"Leaving home page\"))}]}]\n\n   [\"chat\"\n    {:name ::chat\n     :view chat/page\n     :controllers\n     [{:start (fn [& params]\n                (chat/mount)\n                (js/console.log \"Entering sub-page 2\"))\n\n       :stop  (fn [& params] (js/console.log \"Leaving sub-page 2\"))}]}]\n\n   [\"game/:name\"\n    {:name ::game\n     :view home/page\n     :controllers\n     [{:start (fn [& params]\n                (js/console.log \"Entering game\" params))\n       :stop  (fn [& params] (js/console.log \"Leaving game\"))}]}]\n\n   [\"lobby\"\n    {:name ::lobby\n     :view lobby/page\n     :controllers\n     [{:start (fn [& params]\n                (chat/mount)\n                (js/console.log \"Entering sub-page 2\"))\n\n       :stop  (fn [& params] (js/console.log \"Leaving sub-page 2\"))}]}]\n\n   [\"draw\"\n    {:name ::draw\n     :view draw/page\n     :controllers\n     [{:start (fn [& params]\n                (draw/mount)\n                (js/console.log \"Entering sub-page 2\"))\n       :stop  (fn [& params] (js/console.log \"Leaving sub-page 2\"))}]}]])\n\n(def router\n  (rf/router\n   routes\n   {:data {:coercion rss/coercion}}))\n\n(re-frame/reg-sub\n ::current-route\n (fn [db]\n   (:current-route db)))\n\n(re-frame/reg-event-db\n ::navigated\n (fn [{current-route :current-route :as db} [_ new-match]]\n   (let [controllers (rfc/apply-controllers (:controllers current-route) new-match)]\n     (assoc db :current-route (assoc new-match :controllers controllers)))))\n\n(defn on-navigate [new-match]\n  (when new-match\n    (>evt [::navigated new-match])))\n\n(defn router-component [{:keys [router]}]\n  (let [current-route (<sub [::current-route])]\n    [:div\n     (when current-route\n       [(-> current-route :data :view)])]))\n\n(defn init []\n  (js/console.log \"Initializing routes\")\n\n  (rfe/start!\n   router\n   on-navigate\n   {:use-fragment false}))\n\n(defn mount [page-root]\n  (re-frame/clear-subscription-cache!)\n  (init)\n  (reagent-dom/render [router-component {:router router}] page-root))\n"]}